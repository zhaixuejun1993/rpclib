#pragma once

#ifndef CONFIG_H_RPC
#define CONFIG_H_RPC

#include <cstddef>
#include <cstdint>

#include "rpc/compatibility.h"

#ifndef _WIN32
#define IPC_PREFIX "/tmp/ols_rpc_"
#else
#define IPC_PREFIX  "\\\\.\\pipe\\ols_rpc_"
#endif

namespace rpc
{

using session_id_t = std::intptr_t;

//! \brief Constants used in the library
struct constants RPCLIB_FINAL {
    static RPCLIB_CONSTEXPR std::size_t DEFAULT_BUFFER_SIZE = @RPCLIB_DEFAULT_BUFFER_SIZE@;
};

} /* rpc */

// This define allows the end user to replace the msgpack dependency.
// To do so, one has to delete the msgpack headers that are
// in the rpclib directory. The other messagepack headers don't
// need to be stored in place of the others. Finally, the RPCLIB_MSGPACK
// macro has to be changed to the namespace name that this new
// msgpack uses (usually "msgpack", unless it is changed manually)
#ifndef RPCLIB_MSGPACK
#define RPCLIB_MSGPACK msgpack
#endif /* ifndef RPCLIB_MSGPACK */

#ifndef RPCLIB_CXX_STANDARD
#define RPCLIB_CXX_STANDARD @RPCLIB_CXX_STANDARD@
#endif

#endif /* end of include guard: CONFIG_H_RPC */
